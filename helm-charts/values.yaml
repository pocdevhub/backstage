global:
  dynamic:
    # -- Array of YAML files listing dynamic plugins to include with those listed in the `plugins` field.
    # Relative paths are resolved from the working directory of the initContainer that will install the plugins (`/opt/app-root/src`).
    includes:
      # -- List of dynamic plugins included inside the `janus-idp/backstage-showcase` container image, some of which are disabled by default.
      # This file ONLY works with the `janus-idp/backstage-showcase` container image.
      - 'dynamic-plugins.default.yaml'

    # -- List of dynamic plugins, possibly overriding the plugins listed in `includes` files.
    # Every item defines the plugin `package` as a [NPM package spec](https://docs.npmjs.com/cli/v10/using-npm/package-spec),
    # an optional `pluginConfig` with plugin-specific backstage configuration, and an optional `disabled` flag to disable/enable a plugin
    # listed in `includes` files. It also includes an `integrity` field that is used to verify the plugin package [integrity](https://w3c.github.io/webappsec-subresource-integrity/#integrity-metadata-description).
    
    # -------------------------------------------------------
    #begin - Valores customizados - Plugins 
    # -------------------------------------------------------   
    #plugins: []
    plugins:
      - package: './dynamic-plugins/dist/janus-idp-backstage-plugin-analytics-provider-segment'
        disabled: true #https://github.com/redhat-developer/rhdh-chart/blob/main/charts/backstage/README.md
      - package: './dynamic-plugins/dist/backstage-plugin-catalog-backend-module-github-dynamic'
        disabled: false
        pluginConfig:
          catalog:
            providers:
              github:
                organization: "pocdevhub"
                schedule:
                  frequency: { minutes: 1 }
                  timeout: { minutes: 1 }
                  initialDelay: { seconds: 100 }
      - package: './dynamic-plugins/dist/backstage-plugin-scaffolder-backend-module-gitlab-dynamic'    
        disabled: false
      - package: './dynamic-plugins/dist/backstage-plugin-scaffolder-backend-module-gitlab-dynamic'
        disabled: false
      # - package: './dynamic-plugins/dist/immobiliarelabs-backstage-plugin-gitlab-backend-dynamic'
      #   disabled: false
      # - package: './dynamic-plugins/dist/immobiliarelabs-backstage-plugin-gitlab'
      #   disabled: false
      # - package: './dynamic-plugins/dist/backstage-plugin-catalog-backend-module-gitlab-org-dynamic'
      #   disabled: false
      # - package: './dynamic-plugins/dist/janus-idp-backstage-plugin-tekton'
      #   disabled: false
      # - package: './dynamic-plugins/dist/janus-idp-backstage-plugin-quay'
      #   disabled: false
      # integrate 3scale api management
      - package: './dynamic-plugins/dist/backstage-community-plugin-3scale-backend-dynamic'
        disabled: false        
      #- package: './dynamic-plugins/dist/janus-idp-backstage-plugin-keycloak-backend-dynamic'
      #  disabled: false
      #- package: './dynamic-plugins/dist/roadiehq-scaffolder-backend-argocd-dynamic'
      - package: './dynamic-plugins/dist/roadiehq-backstage-plugin-argo-cd-backend-dynamic'
        disabled: false
      - disabled: false
        package: './dynamic-plugins/dist/backstage-community-plugin-redhat-argocd'
        disabled: false
      #- package: './dynamic-plugins/dist/janus-idp-backstage-plugin-tekton'
      #  disabled: false
      #----
      # https://docs.redhat.com/en/documentation/red_hat_plug-ins_for_backstage/2.0/html/topology_plugin_for_backstage/topology-plugin-for-backstage#for-administrators
      #--
      - package: './dynamic-plugins/dist/backstage-plugin-kubernetes'
        disabled: false
      - package: './dynamic-plugins/dist/backstage-plugin-kubernetes-backend-dynamic'
        disabled: false 
      - package: './dynamic-plugins/dist/janus-idp-backstage-plugin-topology'
        disabled: false
      # https://docs.redhat.com/en/documentation/red_hat_developer_hub/1.3/html/authorization/enabling-and-giving-access-to-rbac#enabling-and-giving-access-to-rbac
      - package: ./dynamic-plugins/dist/janus-idp-backstage-plugin-rbac
        disabled: false
    # -------------------------------------------------------
    #begin - Valores customizados - Plugins  
    # -------------------------------------------------------   
    
  # -- Shorthand for users who do not want to specify a custom HOSTNAME. Used ONLY with the DEFAULT upstream.backstage.appConfig value and with OCP Route enabled.
  clusterRouterBase: "apps.k8s.dev.local"
  # -- Custom hostname shorthand, overrides `global.clusterRouterBase`, `upstream.ingress.host`, `route.host`, and url values in `upstream.backstage.appConfig`.
  host: ""
  # -- Enable service authentication within Backstage instance
  auth:
    # -- Backend service to service authentication
    # <br /> Ref: https://backstage.io/docs/auth/service-to-service-auth/
    backend:
      # -- Enable backend service to service authentication, unless configured otherwise it generates a secret value
      enabled: true
      # -- Instead of generating a secret value, refer to existing secret
      existingSecret: ""
      # -- Instead of generating a secret value, use the following value
      value: ""

# -- Upstream Backstage [chart configuration](https://github.com/backstage/charts/blob/main/charts/backstage/values.yaml)
# @default -- Use Openshift compatible settings
upstream:
  nameOverride: backstage
  backstage:
    image:
      registry: quay.io
      #repository: rhdh/rhdh-hub-rhel9
      #repository: janus-idp/backstage-showcase
      repository: tscristianopires/backstage-janus
      #tag: latest
      tag: "0.0.1"
    command: []
    # FIXME (tumido): USE POSTGRES_PASSWORD and POSTGRES_USER instead of POSTGRES_ADMIN_PASSWORD
    # This is a hack. In {fedora,rhel}/postgresql images, regular user is forbidden
    # from creating DBs in runtime. A single DB can be created ahead of time via
    # POSTGRESQL_DATABASE env variable (in this case via
    # upstream.postgresql.primary.extraEnvVars value), but this doesn't allow us to
    # create multiple DBs. Since Backstage requires by default 5 different DBs, we
    # can't accommodate that properly.
    appConfig:
      auditLog:
        rotateFile:
          enabled: true
      auth:
        providers: {}
      app:
        # Please update to match host in case you don't want to configure hostname via `global.clusterRouterBase` or `global.host` if not deploying on an openshift cluster.
        baseUrl: 'https://{{- include "janus-idp.hostname" . }}'
      backend:
        baseUrl: 'https://{{- include "janus-idp.hostname" . }}'
        cors:
          origin: 'https://{{- include "janus-idp.hostname" . }}'
        database:
          connection:
            password: ${POSTGRESQL_ADMIN_PASSWORD}
            user: postgres
        auth:
          externalAccess:
            - type: legacy
              options:
                subject: legacy-default-config
                secret: ${BACKEND_SECRET}
    containerSecurityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop: ["ALL"]
      runAsNonRoot: true
      seccompProfile:
        type: "RuntimeDefault"
    resources:
      requests:
        cpu: 250m
        memory: 1Gi
      limits:
        cpu: 1000m
        memory: 2.5Gi
        ephemeral-storage: 5Gi
    readinessProbe:
      failureThreshold: 3
      httpGet:
        path: /healthcheck
        port: 7007
        scheme: HTTP
      initialDelaySeconds: 30
      periodSeconds: 10
      successThreshold: 2
      timeoutSeconds: 2
    livenessProbe:
      failureThreshold: 3
      httpGet:
        path: /healthcheck
        port: 7007
        scheme: HTTP
      initialDelaySeconds: 60
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 2     
    # -------------------------------------------------------
    #begin - Valores customizados  
    # -------------------------------------------------------   
    #serviceAccountName: backstage-sa
    extraAppConfig:
      - configMapRef: app-config-extra
        filename: app-config-extra.yaml
    # -------------------------------------------------------
    #begin - Valores customizados  
    # -------------------------------------------------------   
    extraEnvVars:
      - name: BACKEND_SECRET
        valueFrom:
          secretKeyRef:
            key: backend-secret
            name: '{{ include "janus-idp.backend-secret-name" $ }}'
      - name: POSTGRESQL_ADMIN_PASSWORD
        valueFrom:
          secretKeyRef:
            key: postgres-password
            name: '{{- include "janus-idp.postgresql.secretName" . }}'
      # -------------------------------------------------------
      #begin - Valores customizados  
      # -------------------------------------------------------   
      # proxy
      - name: http_proxy
        value: 'http://10.0.230.100:8080'
      - name: HTTP_PROXY
        value: 'http://10.0.230.100:8080'
      - name: https_proxy
        value: 'http://10.0.230.100:8080'
      - name: HTTPS_PROXY
        value: 'http://10.0.230.100:8080'
      - name: no_proxy
        value: '.cluster.local,.dev.local,.justica.local,.perimetro.local,.qualidade.local,.svc,10.0.167.0/24,10.0.167.96/27,10.128.0.0/14,127.0.0.1,172.30.0.0/16,api-int.k8s.dev.local,localhost,172.30.0.1'
      - name: NO_PROXY
        value: '.cluster.local,.dev.local,.justica.local,.perimetro.local,.qualidade.local,.svc,10.0.167.0/24,10.0.167.96/27,10.128.0.0/14,127.0.0.1,172.30.0.0/16,api-int.k8s.dev.local,localhost,172.30.0.1'
      # end proxy
      # backstage-community-plugin-3scale-backend-dynamic
      - name: THREESCALE_BASE_URL
        value: 'https://3scale-admin.apps.k8s.dev.local'
      - name: THREESCALE_ACCESS_TOKEN
        value: 'U7myfeuSBDfifxJa'
      - name: NODE_EXTRA_CA_CERTS
        value: |
          -----BEGIN CERTIFICATE-----
          MIIFmDCCBICgAwIBAgIILbdZgux9FhowDQYJKoZIhvcNAQELBQAwPDEbMBkGA1UE
          AwwSSlVTVElDQSBTVUJDQSAwMDA0MRAwDgYDVQQKDAdKVVNUSUNBMQswCQYDVQQG
          EwJQVDAeFw0yNDA3MTUxNDA3NTRaFw0yNzA3MTYxNDA3NTRaMGkxHTAbBgNVBAMM
          FCouYXBwcy5rOHMuZGV2LmxvY2FsMQ0wCwYDVQQLDAREU1NUMQ4wDAYDVQQLDAVJ
          R0ZFSjELMAkGA1UECgwCTUoxDzANBgNVBAcMBkxpc2JvYTELMAkGA1UEBhMCUFQw
          ggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDMQD+p3IE4QRH8H3sbx+xx
          dZg7YO3a4snwJlNRqaQu5VwQZckn51U5LW3+Rsvp9Hz/cTzind1ZhnpaRu9Fb0Dg
          NuFjegP4QO7Jg6ljm9p4KyaBTm+s3gzS/PScX+DojnpiO1LOKHeYO/vTpW9B26gD
          eHxxN2fZrBJ83h9hvi9ac5v/Ad1K/PXISTK8V3OktHmSMZWqGpQvnITPSZzdiVj1
          o9wmBanhP3TOO6FN2hWjkTAcHgmnyZxu85B01rFcvID7zj2jGGzgCSes9fM2vI4W
          xjGkp+MJl/qpJ4YTOipZNLIdFKObHxFE+h60BSKx31p4vWzRVpKCjok6qDlii7D5
          AgMBAAGjggJvMIICazCB1QYIKwYBBQUHAQEEgcgwgcUwgYgGCCsGAQUFBzAChnxo
          dHRwOi8vcGtpLm1qLnB0L2VqYmNhL3B1YmxpY3dlYi93ZWJkaXN0L2NlcnRkaXN0
          P2NtZD1pZWNhY2VydCZpc3N1ZXI9Q04lM2RKVVNUSUNBK1NVQkNBKzAwMDQlMmNP
          JTNkSlVTVElDQSUyY0MlM2RQVCZsZXZlbD0wMDgGCCsGAQUFBzABhixodHRwOi8v
          cGtpLm1qLnB0L2VqYmNhL3B1YmxpY3dlYi9zdGF0dXMvb2NzcDAdBgNVHQ4EFgQU
          MwmIPzZsYPw+TLYr2k4RA9EO8uMwDAYDVR0TAQH/BAIwADAfBgNVHSMEGDAWgBT5
          Oy6tvwpByR0Wv5+z9J5U1K9F3DA1BgNVHSAELjAsMCoGBFUdIAAwIjAgBggrBgEF
          BQcCARYUaHR0cDovL3BraS5tai5wdC9jcHMwgbsGA1UdHwSBszCBsDCBraBpoGeG
          ZWh0dHA6Ly9wa2kubWoucHQvZWpiY2EvcHVibGljd2ViL3dlYmRpc3QvY2VydGRp
          c3Q/Y21kPWNybCZpc3N1ZXI9Qz1QVCxPPUpVU1RJQ0EsQ049SlVTVElDQSBTVUJD
          QSAwMDA0okCkPjA8MQswCQYDVQQGEwJQVDEQMA4GA1UECgwHSlVTVElDQTEbMBkG
          A1UEAwwSSlVTVElDQSBTVUJDQSAwMDA0MA4GA1UdDwEB/wQEAwIFoDAdBgNVHSUE
          FjAUBggrBgEFBQcDAgYIKwYBBQUHAwEwHwYDVR0RBBgwFoIUKi5hcHBzLms4cy5k
          ZXYubG9jYWwwDQYJKoZIhvcNAQELBQADggEBACUk63fm5ZE2PqeqhM4UtZ58YlwF
          bs4Qe5X1vxqYTEOwEXU36lRvR8g4fAtP2bUBzIiD/gQqgLaaW6e1Zhmt8izUAyMn
          XAvzBwQc1gTwW5TtiXUWdvOxTdg7DqzwRY03B7f0uYCTrXkVB78fYU/ZQlI7Ucyh
          AtGSTO83hPnFkaXeTKmBkmzWKSc7lA8/SD7TmDteVDkhvx1rD/4QoIeZMqO/okCK
          /eUY2ce1ubHR9T442kmdSfTYx3tLZ3NpLKbePRh0rt+7muFmo7yaeuPTmWX9YNXy
          cyy3ZVxsvRj7m8IcNdV5qHqNv5HztvgyeI1Nrq18vefzcl7QR4qpvRbZ9cI=
          -----END CERTIFICATE-----
          -----BEGIN CERTIFICATE-----
          MIIGPzCCBCegAwIBAgIIUi+ulAt210AwDQYJKoZIhvcNAQELBQAwPTEcMBoGA1UE
          AwwTSlVTVElDQSBST09UQ0EgMDAwMTEQMA4GA1UECgwHSlVTVElDQTELMAkGA1UE
          BhMCUFQwHhcNMTgwNzIwMTQzMDQ5WhcNMzAwNzE3MTQzMDQ5WjA8MRswGQYDVQQD
          DBJKVVNUSUNBIFNVQkNBIDAwMDQxEDAOBgNVBAoMB0pVU1RJQ0ExCzAJBgNVBAYT
          AlBUMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAsKxh2QICGg5Jubz8
          SXl9kWxnn090/iaseo31S5zfaukxbG2I2Y8/KAAtS9dHiCV+i9M15KmMI6HtDzOM
          Yu1QoAGwpxutHbpv052phNVKWdiF84edPa6qPw9uC7J7PJeT+SqiIoNSw34Q4jP8
          BqMHLY72xj+GtuqLjAYasYgPCKJIWos3KRI4XiovTJkMaq1JPC//WGPZpJAPqqhg
          C9hyOMqqZjv5xoW9CQReiVsOXKqIbs4FOHc3ilgWuu6eWcgn46wmq+VQKtb/Sgak
          mZJLNIV5qww0NFCmvARr1ifXG2xxuuFTMEMeWki2f0D6SP0enULXH25wKf4FXkk5
          4MkkmQIDAQABo4ICQjCCAj4wgdYGCCsGAQUFBwEBBIHJMIHGMIGJBggrBgEFBQcw
          AoZ9aHR0cDovL3BraS5tai5wdC9lamJjYS9wdWJsaWN3ZWIvd2ViZGlzdC9jZXJ0
          ZGlzdD9jbWQ9aWVjYWNlcnQmaXNzdWVyPUNOJTNkSlVTVElDQStST09UQ0ErMDAw
          MSUyY08lM2RKVVNUSUNBJTJjQyUzZFBUJmxldmVsPTAwOAYIKwYBBQUHMAGGLGh0
          dHA6Ly9wa2kubWoucHQvZWpiY2EvcHVibGljd2ViL3N0YXR1cy9vY3NwMB0GA1Ud
          DgQWBBT5Oy6tvwpByR0Wv5+z9J5U1K9F3DASBgNVHRMBAf8ECDAGAQH/AgEAMB8G
          A1UdIwQYMBaAFGEonSQh1RsTwLciGKtQ9B103b2KMDUGA1UdIAQuMCwwKgYEVR0g
          ADAiMCAGCCsGAQUFBwIBFhRodHRwOi8vcGtpLm1qLnB0L2NwczCBxwYDVR0fBIG/
          MIG8MIG5oHSgcoZwaHR0cDovL3BraS5tai5wdC9lamJjYS9wdWJsaWN3ZWIvd2Vi
          ZGlzdC9jZXJ0ZGlzdD9jbWQ9Y3JsJmlzc3Vlcj1DTiUzZEpVU1RJQ0ErUk9PVENB
          KzAwMDElMmNPJTNkSlVTVElDQSUyY0MlM2RQVKJBpD8wPTELMAkGA1UEBhMCUFQx
          EDAOBgNVBAoMB0pVU1RJQ0ExHDAaBgNVBAMME0pVU1RJQ0EgUk9PVENBIDAwMDEw
          DgYDVR0PAQH/BAQDAgEGMA0GCSqGSIb3DQEBCwUAA4ICAQAXudcf1F00QJVUmWko
          Eh1MkrKAsPmM8hgSCJNFKkVXSHZm+isOHhLc5Fk2ZZVQxOtybu3zR93pyozZWcPj
          u5YayGZc0Bmya6dbyRm8mhcAiqKhlEFoVyN38om72NT+HQjW8fHRUW/pfXw0docP
          1pXTsz6OX8DJbOH5Us0vcAd0uPMeVvjki1ViyvIcpa/ubBLyjLPACidNO32E3oHH
          4lRygFJRRmRZuqXxTyKmUWAV9vJzJt9XNgjh4gUwKbizymRsyTpsDyixctfU+6Qb
          mmqOW5VYH1J5VQQ0b9YJ+DTl/gxrW1QY7Ay3cl8y6GYVkWx/03a3GwXq0egcNzjo
          KMucU5pabsJMgNZ9RR/v+UWq8oXeXZEIAXXRTIhGka/Brp4hbtoLmtM4/H9h5Lhh
          a7Q2S2dc4qJTjPYH2JL/kWbMaBH6BwV2Lmy8PJRal04CBbdM+0cH9slBamq2qvnd
          jm/7qfLfAp5eeY/DtFpFWqHSEPIaUSenCqkWN6DIjV+AyItRT2BBDAFCl32Xszj3
          JykvyFiovuRUI/9TiupYlWDETP8KWJlA3OA4DOdnMNvOu97cSYAWp4MiXHwEPlOj
          OBAvKU7LSEx4SSjAVKNAZUd2kcD8UHwYYKEXGuncw1ZIPaTkVSAuptE8yovI74rm
          HMlEKo8oEp2Jr1PkB/JRtGvIzg==
          -----END CERTIFICATE-----
          -----BEGIN CERTIFICATE-----
          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
          -----END CERTIFICATE-----
    # -------------------------------------------------------
    # end - Valores customizados  
    # -------------------------------------------------------  
    args:
      # This additional `app-config`` file is generated by the initContainer below, and contains the merged configuration of installed dynamic plugins.
      - '--config'
      #- dynamic-plugins-root/app-config.dynamic-plugins.yaml
      - app-config.dynamic-plugins.yaml
    extraVolumeMounts:
      # The initContainer below will install dynamic plugins in this volume mount.
      - name: dynamic-plugins-root
        mountPath: /opt/app-root/src/dynamic-plugins-root
      # Audit Log data will be stored in this volume mount.
      - name: audit-log-data
        mountPath: /var/log/redhat-developer-hub/audit
    extraVolumes:
      - name: dynamic-plugins-root
        persistentVolumeClaim:
          claimName: '{{ printf "%s-dynamic-plugins-root" .Release.Name }}'
      - name: audit-log-data
        persistentVolumeClaim:
          claimName: '{{ printf "%s-audit-log" .Release.Name }}'
      # Volume that will expose the `dynamic-plugins.yaml` file from the `dynamic-plugins` config map.
      # The `dynamic-plugins` config map is created by the helm chart from the content of the `global.dynamic` field.
      - name: dynamic-plugins
        configMap:
          defaultMode: 420
          name: '{{ printf "%s-dynamic-plugins" .Release.Name }}'
          optional: true
      # Optional volume that allows exposing the `.npmrc` file (through a `dynamic-plugins-npmrc` secret)
      # to be used when running `npm pack` during the dynamic plugins installation by the initContainer.
      - name: dynamic-plugins-npmrc
        secret:
          defaultMode: 420
          optional: true
          secretName: '{{ printf "%s-dynamic-plugins-npmrc" .Release.Name }}'
      # Optional volume that allows adding a container registry `auth.json` file (through a `dynamic-plugins-registry-auth` secret)
      # to be used when installing plugins from secure container registries during the dynamic plugins installation by the initContainer.
      - name: dynamic-plugins-registry-auth
        secret:
          defaultMode: 416
          optional: true
          secretName: '{{ printf "%s-dynamic-plugins-registry-auth" .Release.Name }}'
      - name: npmcacache
        emptyDir: {}
    initContainers:
      - name: install-dynamic-plugins
        resources:
          requests:
            cpu: 250m
            memory: 256Mi
          limits:
            cpu: 1000m
            memory: 2.5Gi
            ephemeral-storage: 5Gi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop: ["ALL"]
          runAsNonRoot: true
          seccompProfile:
            type: "RuntimeDefault"
        # -- Image used by the initContainer to install dynamic plugins into the `dynamic-plugins-root` volume mount.
        # It could be replaced by a custom image based on this one.
        # @default -- `quay.io/janus-idp/backstage-showcase:latest`
        image: '{{ include "backstage.image" . }}'
        command:
          - ./install-dynamic-plugins.sh
          - /dynamic-plugins-root
        env:
          - name: NPM_CONFIG_USERCONFIG
            value: /opt/app-root/src/.npmrc.dynamic-plugins
        imagePullPolicy: Always
        volumeMounts:
          - mountPath: /dynamic-plugins-root
            name: dynamic-plugins-root
          - mountPath: /opt/app-root/src/dynamic-plugins.yaml
            name: dynamic-plugins
            readOnly: true
            subPath: dynamic-plugins.yaml
          - mountPath: /opt/app-root/src/.npmrc.dynamic-plugins
            name: dynamic-plugins-npmrc
            readOnly: true
            subPath: .npmrc
          - mountPath: /opt/app-root/src/.config/containers
            name: dynamic-plugins-registry-auth
            readOnly: true
          - mountPath: /opt/app-root/src/.npm/_cacache
            name: npmcacache
        workingDir: /opt/app-root/src
    installDir: /opt/app-root/src
    podAnnotations:
      checksum/dynamic-plugins: >-
        {{- include "common.tplvalues.render" ( dict "value"
        .Values.global.dynamic "context" $) | sha256sum }}
  postgresql:
    enabled: true
    postgresqlDataDir: /var/lib/pgsql/data/userdata
    image:
      registry: quay.io
      repository: fedora/postgresql-15
      tag: latest
    auth:
      secretKeys:
        adminPasswordKey: postgres-password
        userPasswordKey: password
    primary:
      # TODO: https://issues.redhat.com/browse/RHIDP-2645
      podSecurityContext:
        enabled: false
      containerSecurityContext:
        enabled: false
      resources:
        requests:
          cpu: 250m
          memory: 256Mi
        limits:
          cpu: 250m
          memory: 1024Mi
          ephemeral-storage: 20Mi
      persistence:
        enabled: true
        size: 1Gi
        mountPath: /var/lib/pgsql/data
      extraEnvVars:
        - name: POSTGRESQL_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              key: postgres-password
              name: '{{- include "postgresql.v1.secretName" . }}'
  ingress:
    host: "{{ .Values.global.host }}"

# -- OpenShift Route parameters
route:
  # -- Route specific annotations
  annotations: {}

  # -- Enable the creation of the route resource
  enabled: true

  # -- Set the host attribute to a custom value. If not set, OpenShift will generate it, please make sure to match your baseUrl
  host: "{{ .Values.global.host }}"

  # -- Path that the router watches for, to route traffic for to the service.
  path: "/"

  # -- Wildcard policy if any for the route. Currently only 'Subdomain' or 'None' is allowed.
  wildcardPolicy: None

  # -- Route TLS parameters
  # <br /> Ref: https://docs.openshift.com/container-platform/4.9/networking/routes/secured-routes.html
  tls:
    # -- Enable TLS configuration for the host defined at `route.host` parameter
    enabled: true

    # -- Specify TLS termination.
    termination: "edge"

    # -- Certificate contents
    certificate: ""

    # -- Key file contents
    key: ""

    # -- Cert authority certificate contents. Optional
    caCertificate: ""

    # -- Contents of the ca certificate of the final destination.
    # <br /> When using reencrypt termination this file should be provided in order to have routers use it for health checks on the secure connection. If this field is not specified, the router may provide its own destination CA and perform hostname validation using the short service name (service.namespace.svc), which allows infrastructure generated certificates to automatically verify.
    destinationCACertificate: ""

    # --  Indicates the desired behavior for insecure connections to a route.
    # <br /> While each router may make its own decisions on which ports to expose, this is normally port 80. The only valid values are None, Redirect, or empty for disabled.
    insecureEdgeTerminationPolicy: "Redirect"